/** Declaration file generated by dts-gen */

export = node_ts3sdk_client;

type ConfigValueKey =
    'name' |
    'denoise' |
    'vad' |
    'voiceactivation_level' |
    'vad_extrabuffersize' |
    'agc' |
    'agc_level' |
    'agc_max_gain' |
    'echo_cancelling'
;

type InfoValueKey =
    'decibel_last_period'
;

type EventNames =
    'onConnectStatusChangeEvent' |
    'onTalkStatusChangeEvent' |
    'onClientMoveEvent' |
    'onServerErrorEvent' |
    'onNewChannelCreatedEvent' |
    'onClientMoveTimeoutEvent'
;

export interface AudioDevice {
    // Name
    [0]: string;
    // ID
    [1]: string;
}

declare const node_ts3sdk_client: {
    ts3client: {
        ChannelProperties: {
            CODEC: number;
            CODEC_IS_UNENCRYPTED: number;
            CODEC_LATENCY_FACTOR: number;
            CODEC_QUALITY: number;
            DELETE_DELAY: number;
            DESCRIPTION: number;
            FLAG_DEFAULT: number;
            FLAG_PASSWORD: number;
            FLAG_PERMANENT: number;
            FLAG_SEMI_PERMANENT: number;
            MAXCLIENTS: number;
            MAXFAMILYCLIENTS: number;
            NAME: number;
            ORDER: number;
            PASSWORD: number;
            SECURITY_SALT: number;
            TOPIC: number;
        };
        ClientProperties: {
            DEFAULT_CHANNEL: number;
            DEFAULT_CHANNEL_PASSWORD: number;
            FLAG_TALKING: number;
            IDLE_TIME: number;
            INPUT_DEACTIVATED: number;
            INPUT_HARDWARE: number;
            INPUT_MUTED: number;
            IS_MUTED: number;
            IS_RECORDING: number;
            META_DATA: number;
            NICKNAME: number;
            OUTPUTONLY_MUTED: number;
            OUTPUT_HARDWARE: number;
            OUTPUT_MUTED: number;
            PLATFORM: number;
            SECURITY_HASH: number;
            SERVER_PASSWORD: number;
            UNIQUE_IDENTIFIER: number;
            VERSION: number;
            VERSION_SIGN: number;
            VOLUME_MODIFICATOR: number;
        };
        CodecEncryptionMode: {
            FORCED_OFF: number;
            FORCED_ON: number;
            PER_CHANNEL: number;
        };
        CodecType: {
            CELT_MONO: number;
            OPUS_MUSIC: number;
            OPUS_VOICE: number;
            SPEEX_NARROWBAND: number;
            SPEEX_ULTRAWIDEBAND: number;
            SPEEX_WIDEBAND: number;
        };
        ConnectStatus: {
            CONNECTED: number;
            CONNECTING: number;
            DISCONNECTED: number;
            ESTABLISHED: number;
            ESTABLISHING: number;
        };
        HardwareInputStatus: {
            DISABLED: number;
            ENABLED: number;
        };
        HardwareOutputStatus: {
            DISABLED: number;
            ENABLED: number;
        };
        InputDeactivationStatus: {
            ACTIVE: number;
            DEACTIVATED: number;
        };
        LogLevel: {
            CRITICAL: number;
            DEBUG: number;
            DEVEL: number;
            ERROR: number;
            INFO: number;
            WARNING: number;
        };
        LogTypes: {
            CONSOLE: number;
            DATABASE: number;
            FILE: number;
            NONE: number;
            NO_NETLOGGING: number;
            SYSLOG: number;
            USERLOGGING: number;
        };
        MuteInputStatus: {
            MUTED: number;
            NONE: number;
        };
        MuteOutputStatus: {
            MUTED: number;
            NONE: number;
        };
        ReasonIdentifier: {
            CHANNELEDIT: number;
            CHANNELUPDATE: number;
            CLIENTDISCONNECT: number;
            CLIENTDISCONNECT_SERVER_SHUTDOWN: number;
            KICK_CHANNEL: number;
            KICK_SERVER: number;
            KICK_SERVER_BAN: number;
            LOST_CONNECTION: number;
            MOVED: number;
            NONE: number;
            SERVERSTOP: number;
            SUBSCRIPTION: number;
        };
        TalkStatus: {
            NOT_TALKING: number;
            TALKING: number;
            TALKING_WHILE_DISABLED: number;
        };
        TextMessageTargetMode: {
            CHANNEL: number;
            CLIENT: number;
            SERVER: number;
        };
        VirtualServerProperties: {
            CHANNELS_ONLINE: number;
            CLIENTS_ONLINE: number;
            CODEC_ENCRYPTION_MODE: number;
            CREATED: number;
            MAXCLIENTS: number;
            NAME: number;
            PASSWORD: number;
            PLATFORM: number;
            UNIQUE_IDENTIFIER: number;
            UPTIME: number;
            VERSION: number;
            WELCOMEMESSAGE: number;
        };
        Visibility: {
            ENTER: number;
            LEAVE: number;
            RETAIN: number;
        };

        activateCaptureDevice(): any;

        allowWhispersFrom(): any;

        cleanUpConnectionInfo(): any;

        closeCaptureDevice(schID: number): void;

        closePlaybackDevice(schID: number): void;

        createIdentity(): string;

        destroyClientLib(): any;

        destroyServerConnectionHandler(schID: number): any;

        flushChannelCreation(schID: number, parentID: number): any;

        flushChannelUpdates(): any;

        flushClientSelfUpdates(schID: number, returnCode?: number | string): any;

        getAverageTransferSpeed(): any;

        getBindingsPath(): any;

        getCaptureDeviceList(mode?: string): AudioDevice[];

        getCaptureModeList(): any;

        getChannelClientList(schID: number, channelID: number): any;

        getChannelEmptySecs(): any;

        getChannelIDFromChannelNames(): any;

        getChannelList(schID: number): any;

        getChannelOfClient(schID: number, clientID: number): number;

        getChannelVariableAsInt(schID: number, channelID: number, flag: number): number;

        getChannelVariableAsString(): any;

        getChannelVariableAsUInt64(): any;

        getClientID(schID: number): number;

        getClientLibVersion(): any;

        getClientLibVersionNumber(): any;

        getClientList(schID: number): any;

        getClientSelfVariableAsInt(schID: number, flag: number): number;

        getClientSelfVariableAsString(schID: number, flag: number): string;

        getClientVariableAsInt(schID: number, clientID: number, flag: number): number;

        getClientVariableAsString(schID: number, clientID: number, flag: number): string;

        getClientVariableAsUInt64(schID: number, clientID: number, flag: number): number;

        getConnectionStatus(schID: number): any;

        getConnectionVariableAsDouble(): any;

        getConnectionVariableAsString(): any;

        getConnectionVariableAsUInt64(): any;

        getCurrentCaptureDeviceName(): any;

        getCurrentCaptureMode(): any;

        getCurrentPlaybackDeviceName(): any;

        getCurrentPlaybackMode(): any;

        getCurrentTransferSpeed(): any;

        getDefaultCaptureMode(): string;

        getDefaultCaptureDevice(mode?: string): AudioDevice;

        getDefaultPlaybackMode(): string;

        getDefaultPlaybackDevice(mode?: string): AudioDevice;

        getEncodeConfigValue(): any;

        getErrorMessage(errno: number): string;

        getInstanceSpeedLimitDown(): any;

        getInstanceSpeedLimitUp(): any;

        getLastError(): any;

        getLastErrorMessage(): any;

        getParentChannelOfChannel(): any;

        getPlatform(): any;

        getPlaybackConfigValueAsFloat(): any;

        getPlaybackDeviceList(mode?: string): AudioDevice[];

        getPlaybackModeList(): any;

        getPreProcessorConfigValue(schID: number, key: ConfigValueKey): any;

        getPreProcessorInfoValueFloat(schID: number, key: InfoValueKey): any;

        getResourcePath(): string;

        getServerConnectionHandlerList(): any;

        getServerConnectionHandlerSpeedLimitDown(): any;

        getServerConnectionHandlerSpeedLimitUp(): any;

        getServerConnectionVariableAsFloat(): any;

        getServerConnectionVariableAsUInt64(): any;

        getServerVariableAsInt(schID: number, FLAG: number): number;

        getServerVariableAsString(schID: number, FLAG: number): string;

        getServerVariableAsUInt64(): any;

        getTransferFileName(): any;

        getTransferFilePath(): any;

        getTransferFileRemotePath(): any;

        getTransferFileSize(): any;

        getTransferFileSizeDone(): any;

        getTransferRunTime(): any;

        getTransferStatus(): any;

        haltTransfer(): any;

        identityStringToUniqueIdentifier(): any;

        initClientLib(logType: number, logPath?: string, soundBackendPath?: string): any;

        initiateGracefulPlaybackShutdown(): any;

        isTransferSender(): any;

        logMessage(message: string, logLevel: number): any;

        on(message: EventNames, cb: any): void;
        on(message: 'onConnectStatusChangeEvent', cb: (schID: number, status: number, errno: number) => void): void;
        on(message: 'onServerErrorEvent', cb: (schID: number, err: any, retCode: string, extraMsg: string) => void): void;
        on(message: 'onNewChannelCreatedEvent', cb: (schID: number, channelID: number, channelParentID: number, invokerID: any, invokerName: string, invokerUniqueIdentifier: string) => void): void;

        openCaptureDevice(schID: number, modeName?: string, deviceID?: string): void;

        openPlaybackDevice(schID: number, modeName?: string, deviceID?: string): void;

        playWaveFile(): any;

        removeFromAllowedWhispersFrom(): any;

        requestChannelDelete(): any;

        requestChannelDescription(): any;

        requestChannelMove(): any;

        requestChannelSubscribe(schID: number, channelIDs: number[]): number;

        requestChannelSubscribeAll(schID: number): number;

        requestChannelUnsubscribe(schID: number, channelIDs: number[]): number;

        requestChannelUnsubscribeAll(schID: number): number;

        requestClientIDs(): any;

        requestClientKickFromChannel(): any;

        requestClientKickFromServer(): any;

        requestClientMove(): any;

        requestClientSetWhisperList(): any;

        requestClientVariables(): any;

        requestConnectionInfo(): any;

        requestCreateDirectory(): any;

        requestDeleteFile(): any;

        requestFile(): any;

        requestFileInfo(): any;

        requestFileList(): any;

        requestMuteClients(): any;

        requestRenameFile(): any;

        requestSendChannelTextMsg(): any;

        requestSendPrivateTextMsg(): any;

        requestSendServerTextMsg(): any;

        requestServerConnectionInfo(): any;

        requestServerVariables(): any;

        requestUnmuteClients(): any;

        sendFile(): any;

        setChannelVariableAsInt(schID: number, channelID: number, FLAG: number, value: number): any;

        setChannelVariableAsString(schID: number, channelID: number, FLAG: number, value: string): any;

        setChannelVariableAsUInt64(schID: number, channelID: number, FLAG: number, value: number): any;

        setClientSelfVariableAsInt(schID: number, property: number, value: number): any;

        setClientSelfVariableAsString(): any;

        setClientVolumeModifier(): any;

        setInstanceSpeedLimitDown(): any;

        setInstanceSpeedLimitUp(): any;

        setLocalTestMode(): any;

        setLogVerbosity(logLevel: number): void;

        setPlaybackConfigValue(): any;

        setPreProcessorConfigValue(schID: number, key: ConfigValueKey, val: any): void;

        setServerConnectionHandlerSpeedLimitDown(): any;

        setServerConnectionHandlerSpeedLimitUp(): any;

        setTransferSpeedLimit(): any;

        spawnNewServerConnectionHandler(): number;

        startConnection(
            schID: number,
            identity: string,
            host: string,
            port: number,
            nickname: string,
            defaultChannels?: string[],
            defaultChannelPassword?: string,
            serverPassword?: string,
        ): void;

        startConnectionWithChannelID(
            schID: number,
            identity: string,
            host: string,
            port: number,
            nickname: string,
            defaultChannelID: number,
            defaultChannelPassword?: string,
            serverPassword?: string,
        ): void;

        startVoiceRecording(): any;

        stopConnection(schID: number): any;

        stopVoiceRecording(): any;
    };
};

